resolver 192.168.2.1 valid=30s;
error_log /nginx_logs/nginx.error.log debug;

# Remplacer les proxy_pass des modules a tester

set $upstream_monitor             https://192.168.2.196:2443;
set $upstream_certissuer          http://192.168.2.196:2080;

set $upstream_node_millegrilles   https://192.168.2.196:3001;
set $upstream_react_millegrilles  https://192.168.2.196:3001;   # 3002 separe

set $upstream_node_coupdoeil      https://192.168.2.196:3003;
set $upstream_react_coupdoeil     https://192.168.2.196:3003;   # 3004

set $upstream_node_senseurspassifs  https://192.168.2.196:3013;
set $upstream_react_senseurspassifs https://192.168.2.196:3014;  # 3014

set $upstream_redmine             https://mg-dev4.maple.maceroc.com:3011;

set $upstream_node_fichiers       https://localhost:3021;

set $upstream_node_place          https://192.168.2.196:3027;
set $upstream_react_place         https://192.168.2.196:3027;  # 3028

set $upstream_react_commondm      https://192.168.2.196:3032;

set $upstream_react_reactjs       https://192.168.2.196:3036;  # 3036

set $upstream_node_collections    https://192.168.2.196:3037;
set $upstream_react_collections   https://192.168.2.196:3038;  # 3038

set $upstream_node_messagerie     https://192.168.2.196:3039;
set $upstream_react_messagerie    https://192.168.2.196:3040;  # 3040

# set $upstream_rabbitmq            https://192.168.2.196:8443;

include /etc/nginx/conf.d/modules/error_page.conf.include;

location /fiche.json {
  gzip on;
  gzip_static on;
  gzip_types application/json;

  root /usr/share/nginx/files;
  include /etc/nginx/conf.d/component_cors.include;
}

# MQ
#location /rabbitmq {
#
#}

# Monitor
location /test {
  alias /var/opt/millegrilles/nginx/html/test;
}

# Monitor
location /administration {
  proxy_pass        $upstream_monitor;
  include /etc/nginx/conf.d/component_base.include;
}

# Monitor
location /installation {
  proxy_pass        $upstream_monitor;
  include /etc/nginx/conf.d/component_base.include;
}

# Monitor
location /certissuer {
  proxy_pass        $upstream_certissuer;
  include /etc/nginx/conf.d/component_base.include;
}

#location /fichiers/public3 {
#  # Redirect pour AWS S3/CloudFront
#  if ($args ~* "preview=1") {
#    rewrite ^/fichiers/(public/[0-9a-f\-]+).*$ https://d2skvkszw3g274.cloudfront.net/QME8SjhaCFySD9qBt1AikQ1U7WxieJY2xDg2JCMczJST/$1_preview_$arg_preview? redirect;
#  }
#  if ($args ~* "video=[0-9p]+") {
#    rewrite ^/fichiers/(public/[0-9a-f\-]+).*$ https://d2skvkszw3g274.cloudfront.net/QME8SjhaCFySD9qBt1AikQ1U7WxieJY2xDg2JCMczJST/$1_video_$arg_video? redirect;
#  }
#  rewrite ^/fichiers/(public/.*)$ https://d2skvkszw3g274.cloudfront.net/QME8SjhaCFySD9qBt1AikQ1U7WxieJY2xDg2JCMczJST/$1 redirect;
#}

#location /fichiers/ {
#  proxy_pass $upstream_node_fichiers;
#  include /etc/nginx/conf.d/auth.include;
#  include /etc/nginx/conf.d/component_fichiers.include;
#  include /etc/nginx/conf.d/modules/proxy_tls.include;
#}

#location /backup/ {
#  proxy_pass        $upstream_node_fichiers;
#
#  # Mapping certificat client pour connexion consignationfichiers
#  proxy_ssl_certificate     /certs_mg/pki.nginx.cert;
#  proxy_ssl_certificate_key /certs_mg/pki.nginx.key;
#
#  #proxy_ssl_trusted_certificate /certs_mg/pki.millegrille;
#  #proxy_ssl_verify       on;
#  #proxy_ssl_verify_depth 1;
#
#  include /etc/nginx/conf.d/component_base_auth.include;
#}

# Verification de l'authentification
# Invoque pour **chaque** appel a nginx sous une page prive/protegee
location = /millegrilles/authentification/verifier {
  proxy_pass        $upstream_node_millegrilles;

  proxy_pass_request_body off; # no need to send the POST body
  #proxy_ssl_trusted_certificate /certs_mg/pki.millegrille;

  proxy_set_header  Content-Length "";
  proxy_set_header  X-Real-IP $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header  X-Forwarded-Proto $scheme;
  proxy_set_header  Host $host;
  proxy_set_header  X-Hostname $hostname;
  proxy_set_header  Content-Length "";
  
  proxy_set_header VERIFIED           $ssl_client_verify;
  proxy_set_header X-Client-Issuer-DN $ssl_client_i_dn;
  proxy_set_header X-Client-Cert      $ssl_client_cert;
  proxy_set_header DN                 $ssl_client_s_dn;  
}

location = /millegrilles/authentification/verifier_public {
  proxy_pass        $upstream_node_millegrilles;

  proxy_pass_request_body off; # no need to send the POST body
  #proxy_ssl_trusted_certificate /certs_mg/pki.millegrille;

  proxy_set_header  Content-Length "";
  proxy_set_header  X-Real-IP $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header  X-Forwarded-Proto $scheme;
}

# Authentification par usager autre que proprietaire
location = /millegrilles/authentification/verifierUsager {
  proxy_pass        $upstream_node_millegrilles;

  #proxy_ssl_trusted_certificate /certs_mg/pki.millegrille;

  proxy_set_header  X-Real-IP $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header  X-Forwarded-Proto $scheme;
}

# Chargement de l'application dev React /millegrilles
# /millegrilles
# /millegrilles/sock-js.node
# /millegrilles/main.*
# /millegrilles/static/*
location ~ (^/millegrilles/?$|^/millegrilles/index.html|^/millegrilles/(sockjs-node|main\..*|static|.+\.hot-update.json$|.*\.module\.wasm|/)) {
 proxy_pass        $upstream_react_millegrilles;
 include /etc/nginx/conf.d/component_base.include;
}

location /millegrilles/static {
 proxy_pass        $upstream_react_millegrilles;
 include /etc/nginx/conf.d/component_base.include;
}

# Support socket.io, proteger via auth plugin
location = /millegrilles/socket.io/ {
  proxy_pass        $upstream_node_millegrilles;

  # include /etc/nginx/conf.d/component_base_auth.include;
  include /etc/nginx/conf.d/component_base.include;
}

# Application React - s'occupe de l'authentification (non protege)
location /millegrilles {
  proxy_pass        $upstream_node_millegrilles;

  proxy_set_header  X-Real-IP $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header  X-Forwarded-Proto $scheme;
  proxy_set_header  Host $host;
}

location ~ (^/coupdoeil/?$|^/coupdoeil/(sockjs-node|static|main\..*|.*\.hot-update.json|.*\.module\.wasm)) {
 proxy_pass        $upstream_react_coupdoeil;
 include /etc/nginx/conf.d/component_base_auth.include;
}
location /coupdoeil {
  proxy_pass        $upstream_node_coupdoeil;
  include /etc/nginx/conf.d/component_base_auth.include;
}

# Chargement de /senseurspassifs via dev React
# /senseurspassifs
# /senseurspassifs/sock-js.node
# /senseurspassifs/main.*
# /senseurspassifs/static/*
location ~ (^/senseurspassifs/?$|^/senseurspassifs/(sockjs-node|static|main\..*|.*\.hot-update.json)) {
 proxy_pass        $upstream_react_senseurspassifs;
 include /etc/nginx/conf.d/component_base_auth.include;
}
location /senseurspassifs {
  proxy_pass        $upstream_node_senseurspassifs;
  include /etc/nginx/conf.d/component_base_auth.include;
}

# Chargement de /place via dev React
# /place
# /place/sock-js.node
# /place/main.*
# /place/static/*
location ~ (^/place$|^/place/(sockjs-node|static|main\..*|.*\.hot-update.json)) {
 proxy_pass   $upstream_react_place;
 include /etc/nginx/conf.d/component_base_auth.include;
}
#location ~ /place/(forum|fichiers) {
#  rewrite ^(.*)$ /place/index.html;
#}
location /place {
  proxy_pass  $upstream_node_place;
  include /etc/nginx/conf.d/component_base_auth.include;
}

# Chargement de /collections via dev React
# /collections
# /collections/sock-js.node
# /collections/main.*
# /collections/static/*
location ~ (^/collections$|^/collections/(sockjs-node|static|main\..*|.*\.hot-update.json|.*\.module\.wasm)) {
# location /collections {
  proxy_pass  $upstream_react_collections;

  include /etc/nginx/conf.d/component_base_auth.include;

  # Support WSS
  proxy_set_header  Host $host;
}
location = /collections/fichiers/verifier {
  proxy_pass  $upstream_node_collections;
  proxy_pass_request_body off; # no need to send the POST body
  #return 200;
}
location /collections/fichiers {
  if ($request_method !~ GET|OPTIONS) {
    return 405;
  }

  rewrite ^(/collections/fichiers/)(.*)$ /fichiers_transfert/$2 break;

  proxy_pass $upstream_node_fichiers;

  # Activer l'auth plugin
  auth_request      /collections/fichiers/verifier;
  # Override header verified, aucun check SSL requis (cert nginx uniquement)
  proxy_set_header VERIFIED INTERNAL;
  proxy_set_header  Host              $host;
  proxy_set_header  X-Hostname        $hostname;

  # Config commune pour acces a consignation
  include /etc/nginx/conf.d/component_fichiers.include;
  include /etc/nginx/conf.d/modules/proxy_tls.include;
}
location /collections/upload {
  proxy_pass $upstream_node_collections;
  include /etc/nginx/conf.d/auth.include;
  include /etc/nginx/conf.d/component_proxyheaders.include;
  proxy_read_timeout 30s;
  client_max_body_size 5m;
}
location /collections {
  proxy_pass $upstream_node_collections;
  # include /etc/nginx/conf.d/component_base_auth.include;
  include /etc/nginx/conf.d/auth.include;

  include /etc/nginx/conf.d/component_proxyheaders.include;
  include /etc/nginx/conf.d/component_gzip.include;
  proxy_read_timeout 15m;  # Utilise pour socket.io
  client_max_body_size 64k;
}

# Chargement de /collections via dev React
# /messagerie
location ~ (^/messagerie$|^/messagerie/(sockjs-node|static|main\..*|.*\.hot-update.json|.*\.module\.wasm)) {
 proxy_pass  $upstream_react_messagerie;

 include /etc/nginx/conf.d/component_base_auth.include;

 # Support WSS
 proxy_set_header  Host $host;
}
location = /messagerie/fichiers/verifier {
  proxy_pass  $upstream_node_messagerie;
  proxy_pass_request_body off; # no need to send the POST body
  #return 200;
}
location /messagerie/poster {
  proxy_pass $upstream_node_messagerie;
  # include /etc/nginx/conf.d/component_base.include;

  include /etc/nginx/conf.d/component_proxyheaders.include;
  include /etc/nginx/conf.d/component_gzip.include;

  # Max upload poster pour message/fichier (batch)
  client_max_body_size 5M;
}
location /messagerie/fichiers {
  if ($request_method !~ GET|OPTIONS) {
    return 405;
  }

  rewrite ^(/messagerie/fichiers/)(.*)$ /fichiers_transfert/$2 break;

  proxy_pass $upstream_node_fichiers;

  # Activer l'auth plugin
  #auth_request      /messagerie/fichiers/verifier;
  # Override header verified, aucun check SSL requis (cert nginx uniquement)
  proxy_set_header VERIFIED INTERNAL;
  proxy_set_header  Host              $host;
  proxy_set_header  X-Hostname        $hostname;

  # Config commune pour acces a consignation
  #include /etc/nginx/conf.d/component_fichiers.include;

  # ---- tweaks , tests ------
  include /etc/nginx/conf.d/component_proxyheaders.include;
  #include /etc/nginx/conf.d/component_gzip.include;
  #include /etc/nginx/conf.d/component_cors.include;

  slice 5m;
  #proxy_cache       cache_fichiers;
  #proxy_cache_lock  on;
  #proxy_cache_background_update on;
  #proxy_cache_use_stale error timeout updating
  #                      http_500 http_502 http_503 http_504;

  #proxy_cache_key   $uri$is_args$args$slice_range;
  #proxy_set_header  Range $slice_range;
  #proxy_cache_valid 200 201 202 206 1d;
  #proxy_cache_valid 404 15s;
  #proxy_cache_valid 401 403 500 502 503 504 5s;

  #proxy_read_timeout 120s;
  client_max_body_size 5m;  # Limite batch upload
  # ----------


  include /etc/nginx/conf.d/modules/proxy_tls.include;
}
location /messagerie/upload {
  proxy_pass $upstream_node_messagerie;
  include /etc/nginx/conf.d/auth.include;
  include /etc/nginx/conf.d/component_proxyheaders.include;
  proxy_read_timeout 30s;
  client_max_body_size 5m;
}
location /messagerie {
  proxy_pass $upstream_node_messagerie;
  include /etc/nginx/conf.d/component_base_auth.include;
}

#location /reactjs {
# proxy_pass  $upstream_react_reactjs;
#
# include /etc/nginx/conf.d/component_base_auth.include;
#
# # Support WSS
# proxy_set_header  Host $host;
#}

#location /site1/fichiers {
#  expires 1y;
#  root /var/opt/millegrilles/nginx/html;
#  include /etc/nginx/conf.d/component_base.include;
#  include /etc/nginx/conf.d/component_cors.include;
#}

#location /site1 {
#  expires 0s;
#  root /var/opt/millegrilles/nginx/html;
#  include /etc/nginx/conf.d/component_base.include;
#  include /etc/nginx/conf.d/component_cors.include;
#}
